import { Injectable } from '@nestjs/common';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { Observable, fromEvent } from 'rxjs';

@Injectable()
export class EventGateway {
  constructor(private readonly eventEmitter: EventEmitter2) { }

  /**
   * Ã‰mettre une mise Ã  jour du classement (pour l'ajout et la mise Ã  jour aprÃ¨s un match)
   */
  emitRankingUpdate(update: any) {
    console.log("ğŸš€ [NestJS] Ã‰mission d'un Ã©vÃ©nement SSE :", update);

    // Cas 1 : Mise Ã  jour du classement aprÃ¨s un match (tableau `updatedPlayers`)
    if (update.updatedPlayers && Array.isArray(update.updatedPlayers)) {
      console.log("Manita", update.updatedPlayers);
      update.updatedPlayers.forEach((player: { id: any; rank: any; }) => {
        console.log("sortie foreach", player.id, player.rank);
        this.eventEmitter.emit('rankingUpdate', {
          type: 'RankingUpdate',
          player: { id: player.id, rank: player.rank }
        });
      });
      return;
    }

    // Cas 2 : Ajout d'un nouveau joueur (utilisation directe de `update`)
    if (update.player) {
      console.log("bonjour", update.player);
      this.eventEmitter.emit('rankingUpdate', {
        type: 'RankingUpdate',
        player: { id: update.player.id, rank: update.player.rank }
      });
      console.log("ğŸ‘€ ğŸ‘€ ğŸ‘€ ğŸ‘€", {
        type: 'RankingUpdate',
        player: { id: update.player.id, rank: update.player.rank }
      });
      return;
    }

    // Si on arrive ici, `update` est invalide
    console.error("Erreur : Format d'Ã©vÃ©nement `rankingUpdate` invalide :", update);
  }

  /* onRankingUpdate(): Observable<any> {
    console.log("ğŸ‘€ [NestJS] Un client SSE s'est abonnÃ© aux mises Ã  jour.");

    return fromEvent(this.eventEmitter, 'rankingUpdate');
  } */

  onRankingUpdate(): Observable<any> {
    console.log("ğŸ‘€ [NestJS] Un client SSE s'est abonnÃ© aux mises Ã  jour.");

    return new Observable((subscriber) => {
      this.eventEmitter.on('rankingUpdate', (event) => {
        console.log("ğŸ“¡ Ã‰vÃ©nement captÃ© :", event);

        // Envoyer l'Ã©vÃ©nement au format SSE correct
        subscriber.next(`data: ${JSON.stringify(event)}\n\n`);
      });
    });
  }

  // Ã‰mettre un Ã©vÃ©nement quand un match se termine
  emitMatchFinished(update: any) {
    console.log("Ã‰mission d'une mise Ã  jour de match terminÃ© :", update);
    this.eventEmitter.emit('matchFinished', update);
  }

  // Ã‰couter l'Ã©vÃ©nement en temps rÃ©el pour SSE
  onMatchFinished(): Observable<any> {
    return fromEvent(this.eventEmitter, 'matchFinished'); // SSE en temps rÃ©el
  }

}